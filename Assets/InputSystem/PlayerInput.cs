//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""f8c3f81b-5d42-4f4a-a21f-94fd534eb97c"",
            ""actions"": [
                {
                    ""name"": ""DrawWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""89ff06eb-7e4f-4cc9-b511-54a91f45afbd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SheathWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""927638ff-fe78-44df-a3f2-e936afab68e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""aea0fb11-4b01-4b20-b4e3-bd625f8440bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextWeaponSlot"",
                    ""type"": ""Button"",
                    ""id"": ""2fff7b6d-ddae-4b23-82ed-303a5ae280ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousWeaponSlot"",
                    ""type"": ""Button"",
                    ""id"": ""11c011dc-e1ad-460d-b93e-c2f67311c481"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CursorDelta"",
                    ""type"": ""Value"",
                    ""id"": ""752ad548-f174-4c21-bd3e-9c5fe33841c4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CursorPosition"",
                    ""type"": ""Value"",
                    ""id"": ""357ab32b-26ac-4d71-a84b-3fa73e479bba"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""010a6a06-dd98-429f-b648-e8f0606913d3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""723c3f71-a389-441a-b00b-e0d95c3f6df3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5ae088fb-3170-4f07-888a-e39358ec4e3c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c6cadc7-cf1d-4a7e-b477-2c129293b405"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""63c5d86b-c457-4545-b35f-652fdd4423b0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f40267e1-c110-4427-be28-e302f8757df4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""da8dcc8d-8672-40f5-ae7c-a82300e4215c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""55ee910e-f562-40d2-80fa-2bb768396ad0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5328df34-4f78-472b-9542-d80a2c0a6522"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c734af96-9f23-4e61-9285-67ff27d2c6ef"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18c3ba36-936d-42a6-8a2e-d2b1409d2ebc"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""DrawWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c339cc91-0ed6-4878-86ee-6f02bf407680"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""DrawWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce9aa639-6445-4f60-8661-3ca16ef7ef1b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""CursorDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5bc06717-6f82-46cb-9049-c43153fcc80c"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39569801-b565-4afb-90d6-5e3ad2f70bf7"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""SheathWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4f786ba-7ce7-49b6-9bed-041a7a82b987"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SheathWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d311c420-28cb-4d83-be36-207d695ae7cc"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextWeaponSlot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e217b25-29fe-4ef2-bdc4-e10335360f09"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextWeaponSlot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""823a71dd-9054-4c53-b2aa-42f54e133d3a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousWeaponSlot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebad90b1-172b-4d24-b0a3-c47b9f464fd5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85d6b24f-0b9f-42df-86f2-b4e6e6c0b057"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<VirtualMouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Character
        m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
        m_Character_DrawWeapon = m_Character.FindAction("DrawWeapon", throwIfNotFound: true);
        m_Character_SheathWeapon = m_Character.FindAction("SheathWeapon", throwIfNotFound: true);
        m_Character_Attack = m_Character.FindAction("Attack", throwIfNotFound: true);
        m_Character_NextWeaponSlot = m_Character.FindAction("NextWeaponSlot", throwIfNotFound: true);
        m_Character_PreviousWeaponSlot = m_Character.FindAction("PreviousWeaponSlot", throwIfNotFound: true);
        m_Character_CursorDelta = m_Character.FindAction("CursorDelta", throwIfNotFound: true);
        m_Character_CursorPosition = m_Character.FindAction("CursorPosition", throwIfNotFound: true);
        m_Character_Movement = m_Character.FindAction("Movement", throwIfNotFound: true);
        m_Character_Interact = m_Character.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Character
    private readonly InputActionMap m_Character;
    private ICharacterActions m_CharacterActionsCallbackInterface;
    private readonly InputAction m_Character_DrawWeapon;
    private readonly InputAction m_Character_SheathWeapon;
    private readonly InputAction m_Character_Attack;
    private readonly InputAction m_Character_NextWeaponSlot;
    private readonly InputAction m_Character_PreviousWeaponSlot;
    private readonly InputAction m_Character_CursorDelta;
    private readonly InputAction m_Character_CursorPosition;
    private readonly InputAction m_Character_Movement;
    private readonly InputAction m_Character_Interact;
    public struct CharacterActions
    {
        private @PlayerInput m_Wrapper;
        public CharacterActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @DrawWeapon => m_Wrapper.m_Character_DrawWeapon;
        public InputAction @SheathWeapon => m_Wrapper.m_Character_SheathWeapon;
        public InputAction @Attack => m_Wrapper.m_Character_Attack;
        public InputAction @NextWeaponSlot => m_Wrapper.m_Character_NextWeaponSlot;
        public InputAction @PreviousWeaponSlot => m_Wrapper.m_Character_PreviousWeaponSlot;
        public InputAction @CursorDelta => m_Wrapper.m_Character_CursorDelta;
        public InputAction @CursorPosition => m_Wrapper.m_Character_CursorPosition;
        public InputAction @Movement => m_Wrapper.m_Character_Movement;
        public InputAction @Interact => m_Wrapper.m_Character_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Character; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterActions instance)
        {
            if (m_Wrapper.m_CharacterActionsCallbackInterface != null)
            {
                @DrawWeapon.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDrawWeapon;
                @DrawWeapon.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDrawWeapon;
                @DrawWeapon.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDrawWeapon;
                @SheathWeapon.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSheathWeapon;
                @SheathWeapon.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSheathWeapon;
                @SheathWeapon.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSheathWeapon;
                @Attack.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAttack;
                @NextWeaponSlot.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnNextWeaponSlot;
                @NextWeaponSlot.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnNextWeaponSlot;
                @NextWeaponSlot.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnNextWeaponSlot;
                @PreviousWeaponSlot.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPreviousWeaponSlot;
                @PreviousWeaponSlot.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPreviousWeaponSlot;
                @PreviousWeaponSlot.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnPreviousWeaponSlot;
                @CursorDelta.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnCursorDelta;
                @CursorDelta.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnCursorDelta;
                @CursorDelta.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnCursorDelta;
                @CursorPosition.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnCursorPosition;
                @CursorPosition.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnCursorPosition;
                @CursorPosition.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnCursorPosition;
                @Movement.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovement;
                @Interact.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_CharacterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DrawWeapon.started += instance.OnDrawWeapon;
                @DrawWeapon.performed += instance.OnDrawWeapon;
                @DrawWeapon.canceled += instance.OnDrawWeapon;
                @SheathWeapon.started += instance.OnSheathWeapon;
                @SheathWeapon.performed += instance.OnSheathWeapon;
                @SheathWeapon.canceled += instance.OnSheathWeapon;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @NextWeaponSlot.started += instance.OnNextWeaponSlot;
                @NextWeaponSlot.performed += instance.OnNextWeaponSlot;
                @NextWeaponSlot.canceled += instance.OnNextWeaponSlot;
                @PreviousWeaponSlot.started += instance.OnPreviousWeaponSlot;
                @PreviousWeaponSlot.performed += instance.OnPreviousWeaponSlot;
                @PreviousWeaponSlot.canceled += instance.OnPreviousWeaponSlot;
                @CursorDelta.started += instance.OnCursorDelta;
                @CursorDelta.performed += instance.OnCursorDelta;
                @CursorDelta.canceled += instance.OnCursorDelta;
                @CursorPosition.started += instance.OnCursorPosition;
                @CursorPosition.performed += instance.OnCursorPosition;
                @CursorPosition.canceled += instance.OnCursorPosition;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public CharacterActions @Character => new CharacterActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ICharacterActions
    {
        void OnDrawWeapon(InputAction.CallbackContext context);
        void OnSheathWeapon(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnNextWeaponSlot(InputAction.CallbackContext context);
        void OnPreviousWeaponSlot(InputAction.CallbackContext context);
        void OnCursorDelta(InputAction.CallbackContext context);
        void OnCursorPosition(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
